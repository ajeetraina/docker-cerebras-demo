- name: 302_sandbox
  image: mcp/302_sandbox
  run:
    workdir: /app
  config:
    secrets:
      - id: 302_sandbox.api_key
        name: 302AI_API_KEY
        value: YOUR_API_KEY_HERE

- name: 3d-printer
  image: mcp/3d-printer
  run:
    workdir: /app
  config:
    description: Configure the connection to your 3D printer
    secrets:
      - id: 3d-printer-server.token
        name: BAMBU_TOKEN
        value: YOUR_BAMBU_TOKEN
    env:
      - name: BAMBU_SERIAL
        default: YOUR_BAMBU_SERIAL
        expression: '{{3d-printer.serial}}'
      - name: PRINTER_HOST
        default: REAL
        expression: '{{3d-printer.host|safe}}'
      - name: PRINTER_TYPE
        default: bambu
        expression: '{{3d-printer.type}}'
    parameters:
      type: object
      properties:
        host:
          type: string
        serial:
          type: string
        type:
          type: string
      required:
        - host
        - type

- name: armor-crypto
  image: mcp/armor-crypto
  run:
    workdir: /app
  config:
    description: Configure the connection to Armor
    secrets:
      - id: armor-crypto.api_key
        name: ARMOR_API_KEY
        value: <PUT-YOUR-KEY-HERE>
    env:
      - name: ARMOR_API_URL
        default: https://app.armorwallet.ai/api/v1
        expression: '{{armor-crypto.api_url|safe}}'
    parameters:
      type: object
      properties:
        api_url:
          type: string

- name: astra-db
  image: mcp/astra-db
  run:
    workdir: /app
  config:
    description: Configure the connection to Astra DB
    secrets:
      - id: astra-db.applicatin_token
        name: ASTRA_DB_APPLICATION_TOKEN
        value: your_astra_db_token
    env:
      - name: ASTRA_DB_API_ENDPOINT
        default: ""
        expression: '{{astra-db.endpoint|safe}}'
    parameters:
      type: object
      properties:
        endpoint:
          type: string

- name: atlas-docs
  image: mcp/atlas-docs
  run:
    workdir: /app
  config:
    description: Configure the connection to Atlas Docs
    env:
      - name: ATLAS_API_URL
        default: https://atlas.cartograph.app/api
        expression: '{{atlas-docs.api_url|safe}}'
    parameters:
      type: object
      properties:
        api_url:
          type: string

- name: atlassian
  image: mcp/atlassian
  run:
    workdir: /app
  config:
    description: The MCP server is allowed to access these paths
    secrets:
      - id: atlassian.confluence.api_token
        name: CONFLUENCE_API_TOKEN
        value: your_api_token
      - id: atlassian.confluence.personal_token
        name: CONFLUENCE_PERSONAL_TOKEN
        value: your_api_token
      - id: atlassian.jira.api_token
        name: JIRA_API_TOKEN
        value: your_api_token
      - id: atlassian.jira.personal_token
        name: JIRA_PERSONAL_TOKEN
        value: your_api_token
    env:
      - name: CONFLUENCE_URL
        default: https://your-company.atlassian.net/wiki"
        expression: '{{atlassian.confluence.url}}'
      - name: CONFLUENCE_USERNAME
        default: your.email@company.com
        expression: '{{atlassian.confluence.username}}'
      - name: JIRA_URL
        default: https://your-company.atlassian.net
        expression: '{{atlassian.jira.url}}'
      - name: JIRA_USERNAME
        default: your.email@company.com
        expression: '{{atlassian.jira.username}}'
    parameters:
      type: object
      properties:
        confluence:
          type: object
          properties:
            url:
              type: string
            username:
              type: string
          required:
            - url
        jira:
          type: object
          properties:
            url:
              type: string
            username:
              type: string
          required:
            - url
      anyOf:
        - required:
            - confluence
        - required:
            - jira

- name: audiense-insights
  image: mcp/audiense-insights
  run:
    workdir: /app
  config:
    description: Configure the connection to Audiense Insights
    secrets:
      - id: audiense-insights.client_secret
        name: AUDIENSE_CLIENT_SECRET
        value: your_client_secret_here
      - id: audiense-insights.twitter_bearer_token
        name: TWITTER_BEARER_TOKEN
        value: your_token_here
    env:
      - name: AUDIENSE_CLIENT_ID
        default: your_client_id_here
        expression: '{{audiense-insights.client_id}}'
    parameters:
      type: object
      properties:
        client_id:
          type: string
      required:
        - client_id

- name: aws-kb-retrieval-server
  image: mcp/aws-kb-retrieval-server
  run:
    workdir: /app
  config:
    description: Configure the connection to AWS
    secrets:
      - id: aws.secret_access_key
        name: AWS_SECRET_ACCESS_KEY
        value: YOUR_SECRET_ACCESS_KEY_HERE
    env:
      - name: AWS_ACCESS_KEY_ID
        default: YOUR_ACCESS_KEY_HERE
        expression: '{{aws.access_key_id}}'
    parameters:
      type: object
      properties:
        access_key_id:
          type: string
      required:
        - access_key_id

- name: azure
  image: mcp/azure
  run:
    workdir: /app
    command:
      - server
      - start

- name: basic-memory
  image: mcp/basic-memory
  run:
    workdir: /app

- name: bitrefill
  image: mcp/bitrefill
  run:
    workdir: /app
  config:
    description: Configure the connection to Bitrefill
    secrets:
      - id: bitrefill.api_secret
        name: BITREFILL_API_SECRET
        value: your_api_key_here
    env:
      - name: BITREFILL_API_ID
        default: your_api_id_here
        expression: '{{bitrefill.api_id}}'
    parameters:
      type: object
      properties:
        api_id:
          type: string
      required:
        - api_id

- name: box
  image: mcp/box
  run:
    workdir: /app
  config:
    description: Configure the connection to Box
    secrets:
      - id: box.client_secret
        name: BOX_CLIENT_SECRET
        value: your_client_secret
    env:
      - name: BOX_CLIENT_ID
        default: your_client_id
        expression: '{{box.client_id}}'
    parameters:
      type: object
      properties:
        client_id:
          type: string
      required:
        - client_id

- name: brave
  image: mcp/brave-search
  run:
    workdir: /app
  config:
    secrets:
      - id: brave.api_key
        name: BRAVE_API_KEY
        value: YOUR_API_KEY_HERE

- name: chroma
  image: mcp/chroma
  run:
    workdir: /app
  config:
    secrets:
      - id: chroma.api_key
        name: CHROMA_API_KEY
        value: your-api-key

- name: circleci
  image: mcp/circleci
  run:
    workdir: /app
  config:
    description: Configure the connection to CircleCI
    secrets:
      - id: circleci.token
        name: CIRCLECI_TOKEN
        value: your-circleci-token
    env:
      - name: CIRCLECI_BASE_URL
        default: https://circleci.com
        expression: '{{circleci.url|safe}}'
    parameters:
      type: object
      properties:
        url:
          type: string

- name: context7
  image: mcp/context7
  run:
    workdir: /app

- name: cyreslab-ai-shodan
  image: mcp/cyreslab-ai-shodan
  run:
    workdir: /app
  config:
    secrets:
      - id: cyreslab-ai-shodan.api_key
        name: SHODAN_API_KEY
        value: YOUR_SHODAN_API_KEY

- name: dappier
  image: mcp/dappier
  run:
    workdir: /app
  config:
    secrets:
      - id: dappier.api_key
        name: DAPPIER_API_KEY
        value: YOUR_API_KEY_HERE

- name: dart
  image: mcp/dart
  run:
    workdir: /app
  config:
    description: Configure the connection to Dart
    secrets:
      - id: dart.token
        name: DART_TOKEN
        value: dsa_...
    env:
      - name: DART_HOST
        default: https://app.itsdart.com
        expression: '{{dart.host|safe}}'
    parameters:
      type: object
      properties:
        host:
          type: string

- name: databutton
  image: mcp/databutton
  run:
    workdir: /app

- name: descope
  image: mcp/descope
  run:
    workdir: /usr/src/app
  config:
    description: Configure the connection to Descope
    secrets:
      - id: descope.management_key
        name: DESCOPE_MANAGEMENT_KEY
        value: your-descope-management-key-here
    env:
      - name: DESCOPE_PROJECT_ID
        default: your-descope-project-id-here
        expression: '{{descope.project_id}}'
    parameters:
      type: object
      properties:
        project_id:
          type: string
      required:
        - project_id

- name: desktop-commander
  image: mcp/desktop-commander
  run:
    workdir: /usr/src/app

- name: devhub-cms
  image: mcp/devhub-cms
  run:
    workdir: /app
  config:
    description: Configure the connection to DevHub CMS
    secrets:
      - id: devhub-cms.api_key
        name: DEVHUB_API_KEY
        value: YOUR_KEY_HERE
      - id: devhub-cms.api_secret
        name: DEVHUB_API_SECRET
        value: YOUR_SECRET_HERE
    env:
      - name: DEVHUB_BASE_URL
        default: https://yourbrand.cloudfrontend.net
        expression: '{{devhub-cms.url|safe}}'
    parameters:
      type: object
      properties:
        url:
          type: string
      required:
        - url

- name: doit
  image: mcp/doit
  run:
    workdir: /app
  config:
    secrets:
      - id: doit.api_key
        name: DOIT_API_KEY
        value: your_doit_api_key

- name: duckduckgo
  image: mcp/duckduckgo
  run:
    workdir: /app

- name: e2b
  image: mcp/e2b
  run:
    workdir: /app
  config:
    secrets:
      - id: e2b.api_key
        name: E2B_API_KEY
        value: YOUR_API_KEY_HERE

- name: edubase
  image: mcp/edubase
  run:
    workdir: /app
  config:
    description: Configure the connection to EduBase
    secrets:
      - id: edubase.api_key
        name: EDUBASE_API_KEY
        value: YOUR_EDUBASE_API_KEY
    env:
      - name: EDUBASE_API_APP
        default: YOUR_EDUBASE_API_APP
        expression: '{{edubase.app}}'
      - name: EDUBASE_API_URL
        default: YOUR_EDUBASE_API_URL
        expression: '{{edubase.url|safe}}'
    parameters:
      type: object
      properties:
        app:
          type: string
        url:
          type: string
      required:
        - app
        - url

- name: elasticsearch
  image: mcp/elasticsearch
  run:
    workdir: /app
  config:
    description: Configure the connection to Elasticsearch
    secrets:
      - id: elasticsearch.api_key
        name: ES_API_KEY
        value: your-api-key
    env:
      - name: ES_URL
        default: http://localhost:9200
        expression: '{{elasticsearch.url|safe}}'
    parameters:
      type: object
      properties:
        url:
          type: string
      required:
        - url

- name: elevenlabs
  image: mcp/elevenlabs
  run:
    workdir: /app
  config:
    secrets:
      - id: elevenlabs.api_key
        name: ELEVENLABS_API_KEY
        value: <insert-your-api-key-here>

- name: everart
  image: mcp/everart
  run:
    workdir: /app
  config:
    secrets:
      - id: everart.api_key
        name: EVERART_API_KEY
        value: your_key_here

- name: exa
  image: mcp/exa
  run:
    workdir: /app
  config:
    secrets:
      - id: exa.api_key
        name: EXA_API_KEY
        value: your-api-key-here

- name: fetch
  image: mcp/fetch
  run:
    workdir: /app

- name: fibery
  image: mcp/fibery
  run:
    workdir: /app
  config:
    description: Configure the connection to Fibery
    secrets:
      - id: fibery.api_token
        name: FIBERY_API_TOKEN
        value: your-api-token
    env:
      - name: FIBERY_HOST
        default: your-domain.fibery.io
        expression: '{{fibery.host|safe}}'

- name: filesystem
  image: mcp/filesystem
  run:
    workdir: /app
    command:
      - '{{filesystem.paths|volume-target|into}}'
    volumes:
      - '{{filesystem.paths|volume|into}}'
  config:
    description: The MCP server is allowed to access these paths
    parameters:
      type: object
      properties:
        paths:
          type: array
          items:
            type: string
          default:
            - /Users/local-test
      required:
        - paths

- name: firecrawl
  image: mcp/firecrawl
  run:
    workdir: /app
  config:
    description: Configure the connection to Firecrawl
    secrets:
      - id: firecrawl.api_key
        name: FIRECRAWL_API_KEY
        value: YOUR-API-KEY
    env:
      - name: FIRECRAWL_API_URL
        default: https://api.firecrawl.dev/v1
        expression: '{{firecrawl.url|safe}}'
      - name: FIRECRAWL_RETRY_MAX_ATTEMPTS
        default: 5
        expression: '{{firecrawl.retry_max}}'
      - name: FIRECRAWL_RETRY_INITIAL_DELAY
        default: 2000
        expression: '{{firecrawl.retry_delay}}'
      - name: FIRECRAWL_RETRY_MAX_DELAY
        default: 30000
        expression: '{{firecrawl.retry_max_delay}}'
      - name: FIRECRAWL_RETRY_BACKOFF_FACTOR
        default: 3
        expression: '{{firecrawl.retry_backoff_factor}}'
      - name: FIRECRAWL_CREDIT_WARNING_THRESHOLD
        default: 2000
        expression: '{{firecrawl.credit_warning_threshold}}'
      - name: FIRECRAWL_CREDIT_CRITICAL_THRESHOLD
        default: 500
        expression: '{{firecrawl.credit_critical_threshold}}'
    parameters:
      type: object
      properties:
        credit_critical_threshold:
          type: integer
        credit_warning_threshold:
          type: integer
        retry_backoff_factor:
          type: integer
        retry_delay:
          type: integer
        retry_max:
          type: integer
        retry_max_delay:
          type: integer
        url:
          type: string

- name: flexprice
  image: mcp/flexprice
  run:
    workdir: /app
  config:
    description: Configure the connection to Redis
    secrets:
      - id: flexprice.api_key
        name: API_KEY
        value: your_api_key_here
    env:
      - name: BASE_URL
        default: https://api.cloud.flexprice.io
        expression: '{{flexprice.base_url}}'
    parameters:
      type: object
      properties:
        base_url:
          type: string

- name: github
  image: mcp/github
  run:
    workdir: /app
  config:
    secrets:
      - id: github.personal_access_token
        name: GITHUB_PERSONAL_ACCESS_TOKEN
        value: <YOUR_TOKEN>

- name: github-chat
  image: mcp/github-chat
  run:
    workdir: /app
  config:
    secrets:
      - id: github-chat.api_key
        name: GITHUB_API_KEY
        value: YOUR_GITHUB_API_KEY

- name: github-official
  image: mcp/github-mcp-server
  run:
    workdir: /server
  config:
    secrets:
      - id: github.personal_access_token
        name: GITHUB_PERSONAL_ACCESS_TOKEN
        value: <YOUR_TOKEN>

- name: gitlab
  image: mcp/gitlab
  run:
    workdir: /app
  config:
    description: Configure the local or Cloud GitLab instance
    secrets:
      - id: gitlab.personal_access_token
        name: GITLAB_PERSONAL_ACCESS_TOKEN
        value: <YOUR_TOKEN>
    env:
      - name: GITLAB_API_URL
        default: https://gitlab.com/api/v4
        expression: '{{gitlab.url|safe}}'
    parameters:
      type: object
      properties:
        url:
          type: string
          description: api url - optional for self-hosted instances

- name: glif
  image: mcp/glif
  run:
    workdir: /app
  config:
    description: Configure the connection to glif.app
    secrets:
      - id: glif.api_token
        name: GLIF_API_TOKEN
        value: your-token-here
    env:
      - name: GLIF_IDS
        default: ""
        expression: '{{glif.ids}}'
      - name: IGNORE_SAVED_GLIFS
        default: false
        expression: '{{glif.ignored_saved}}'
    parameters:
      type: object
      properties:
        ids:
          type: string
        ignored_saved:
          type: boolean

- name: google-maps
  image: mcp/google-maps
  run:
    workdir: /app
  config:
    secrets:
      - id: google-maps.api_key
        name: GOOGLE_MAPS_API_KEY
        value: <YOUR_API_KEY>

- name: grafana
  image: mcp/grafana
  run:
    workdir: /app
    command:
      - --transport=stdio
  config:
    description: Configure the connection to Grafana
    secrets:
      - id: grafana.api_key
        name: GRAFANA_API_KEY
        value: <your service account token>
    env:
      - name: GRAFANA_URL
        default: http://localhost:3000
        expression: '{{grafana.url|safe}}'
    parameters:
      type: object
      properties:
        url:
          type: string

- name: gyazo
  image: mcp/gyazo
  run:
    workdir: /app
  config:
    secrets:
      - id: gyazo.access_token
        name: GYAZO_ACCESS_TOKEN
        value: your-access-token-here

- name: hackle
  image: mcp/hackle
  run:
    workdir: /usr/src/app
  config:
    secrets:
      - id: hackle.api_key
        name: API_KEY
        value: YOUR_API_KEY

- name: handwriting-ocr
  image: mcp/handwriting-ocr
  run:
    workdir: /app
  config:
    secrets:
      - id: handwriting-ocr.api_token
        name: API_TOKEN
        value: your-api-token

- name: heroku
  image: mcp/heroku
  run:
    workdir: /app
  config:
    secrets:
      - id: heroku.api_key
        name: HEROKU_API_KEY
        value: <YOUR_HEROKU_AUTH_TOKEN>

- name: husqvarna-automower
  image: mcp/husqvarna-automower
  run:
    workdir: /app
  config:
    description: Configure the connection to Husqvarna Automower
    secrets:
      - id: husqvarna.client.secret
        name: HUSQVARNA_CLIENT_SECRET
        value: YOUR_CLIENT_SECRET_HERE
    env:
      - name: HUSQVARNA_CLIENT_ID
        default: YOUR_CLIENT_ID_HERE
        expression: '{{husqvarna.client_id}}'
    parameters:
      type: object
      properties:
        client_id:
          type: string

- name: hyperbrowser
  image: mcp/hyperbrowser
  run:
    workdir: /usr/src/app
  config:
    description: Configure the connection to Hyperbrowser
    secrets:
      - id: hyperbrowser.api_key
        name: HYPERBROWSER_API_KEY
        value: <app or user token>

- name: hyperspell
  image: mcp/hyperspell
  run:
    workdir: /app
  config:
    description: Configure the connection to Hyperspell
    secrets:
      - id: hyperspell.token
        name: HYPERSPELL_TOKEN
        value: <app or user token>
    env:
      - name: USE_RESOURCES
        default: false
        expression: '{{hyperspell.use_resources}}'
      - name: HYPERSPELL_COLLECTION
        default: ""
        expression: '{{hyperspell.collection}}'
    parameters:
      type: object
      properties:
        collection:
          type: string
        use_resources:
          type: boolean

- name: iaptic
  image: mcp/iaptic
  run:
    workdir: /app
  config:
    description: Configure the connection to iaptic
    secrets:
      - id: iaptic.api_key
        name: IAPTIC_API_KEY
        value: your-api-key-here
    env:
      - name: IAPTIC_APP_NAME
        default: your-app-name-here
        expression: '{{iaptic.app_name}}'
    parameters:
      type: object
      properties:
        app_name:
          type: string
      required:
        - app_name

- name: jetbrains
  image: mcp/jetbrains
  config:
    description: Configure the connection to the IDE
    env:
      - name: IDE_PORT
        default: 8090
        expression: '{{jetbrains.port}}'
    parameters:
      type: object
      properties:
        port:
          type: integer

- name: kagisearch
  image: mcp/kagisearch
  run:
    workdir: /app
  config:
    description: Configure the connection to Kagi search
    secrets:
      - id: kagisearch.api_key
        name: KAGI_API_KEY
        value: YOUR_API_KEY_HERE
    env:
      - name: KAGI_SUMMARIZER_ENGINE
        default: cecil
        expression: '{{kagisearch.engine}}'
    parameters:
      type: object
      properties:
        engine:
          type: string

- name: kong
  image: mcp/kong
  run:
    workdir: /app
  config:
    description: Configure the connection to Kong Konnect
    secrets:
      - id: kong.access_token
        name: KONNECT_ACCESS_TOKEN
        value: kpat_api_key_here
    env:
      - name: KONNECT_REGION
        default: us
        expression: '{{kong.region}}'
    parameters:
      type: object
      properties:
        region:
          type: string

- name: kubernetes
  image: mcp/kubernetes
  run:
    workdir: /usr/local/app

- name: lara
  image: mcp/lara
  run:
    workdir: /app
  config:
    description: Configure the connection to Lara Translate
    secrets:
      - id: lara.key_secret
        name: LARA_ACCESS_KEY_SECRET
        value: YOUR_LARA_ACCESS_KEY_SECRET
    env:
      - name: LARA_ACCESS_KEY_ID
        default: YOUR_LARA_ACCESS_KEY_ID
        expression: '{{lara.key_id}}'
    parameters:
      type: object
      properties:
        key_id:
          type: string
      required:
        - key_id

- name: line
  image: mcp/line
  run:
    workdir: /app
  config:
    description: Configure the connection to LINE
    secrets:
      - id: line.access_token
        name: CHANNEL_ACCESS_TOKEN
        value: FILL_HERE
    env:
      - name: DESTINATION_USER_ID
        default: FILL_HERE
        expression: '{{line.user_id}}'
    parameters:
      type: object
      properties:
        user_id:
          type: string
      required:
        - user_id

- name: mcp-discord
  image: mcp/mcp-discord
  run:
    workdir: /app
  config:
    secrets:
      - id: discord.token
        name: DISCORD_TOKEN
        value: YOUR_DISCORD_TOKEN

- name: multiversx-mx
  image: mcp/multiversx-mx
  run:
    workdir: /app
  config:
    description: Configure the connection to MultiversX blockchain
    env:
      - name: MVX_NETWORK
        default: devnet
        expression: '{{multiversx-mx.network}}'
      - name: MVX_WALLET
        default: absolute/path/to/someWallet.pem
        expression: '{{multiversx-mx.wallet}}'
    parameters:
      type: object
      properties:
        network:
          type: string
        wallet:
          type: string
      required:
        - network
        - wallet

- name: neo4j-cloud-aura-api
  image: mcp/neo4j-cloud-aura-api
  run:
    workdir: /app
  config:
    description: Configure the connection to Neo4j Aura
    secrets:
      - id: neo4j.password
        name: NEO4J_AURA_CLIENT_SECRET
        value: <your-client-secret>
    env:
      - name: NEO4J_AURA_CLIENT_ID
        default: <your-client-id>
        expression: '{{neo4j.client_id}}'
    parameters:
      type: object
      properties:
        client_id:
          type: string
      required:
        - client_id

- name: neo4j-cypher
  image: mcp/neo4j-cypher
  run:
    workdir: /app
  config:
    description: Configure the connection to Neo4j
    secrets:
      - id: neo4j.password
        name: NEO4J_PASSWORD
        value: password
    env:
      - name: NEO4J_URL
        default: bolt://host.docker.internal:7687
        expression: '{{neo4j.url}}'
      - name: NEO4J_USERNAME
        default: neo4j
        expression: '{{neo4j.username}}'
    parameters:
      type: object
      properties:
        url:
          type: string
        username:
          type: string
      required:
        - url
        - username

- name: neo4j-memory
  image: mcp/neo4j-memory
  run:
    workdir: /app
  config:
    description: Configure the connection to Neo4j
    secrets:
      - id: neo4j.password
        name: NEO4J_PASSWORD
        value: password
    env:
      - name: NEO4J_URL
        default: bolt://host.docker.internal:7687
        expression: '{{neo4j.url}}'
      - name: NEO4J_USERNAME
        default: neo4j
        expression: '{{neo4j.username}}'
    parameters:
      type: object
      properties:
        url:
          type: string
        username:
          type: string
      required:
        - url
        - username

- name: neon
  image: mcp/neon
  run:
    workdir: /app
  config:
    secrets:
      - id: neon.api_key
        name: NEON_API_KEY
        value: YOUR_API_KEY_HERE

- name: notion
  image: mcp/notion
  run:
    env:
      OPENAPI_MCP_HEADERS: '"{\"Authorization\": \"Bearer $INTERNAL_INTEGRATION_TOKEN\", \"Notion-Version\": \"2022-06-28\"}"'
  config:
    secrets:
      - id: notion.internal_integration_token
        name: INTERNAL_INTEGRATION_TOKEN
        value: ntn_****

- name: obsidian
  image: mcp/obsidian
  run:
    workdir: /app
  config:
    description: Configure the connection to Obsidian
    secrets:
      - id: obsidian.api_key
        name: OBSIDIAN_API_KEY
        value: YOUR_OBSIDIAN_API_KEY
    env:
      - name: OBSIDIAN_HOST
        default: host.docker.internal
        expression: host.docker.internal

- name: openapi-schema
  image: mcp/openapi-schema
  run:
    workdir: /app
    volumes:
      - '{{openApiSchemaPath|or:[]|volume|into}}'

- name: opik
  image: mcp/opik
  run:
    workdir: /app
  config:
    description: Configure the connection to Opik
    secrets:
      - id: opik.api_key
        name: OPIK_API_KEY
        value: your_api_key
    env:
      - name: OPIK_API_BASE_URL
        default: https://www.comet.com/opik/api
        expression: '{{opik.api_base_url|safe}}'
      - name: OPIK_WORKSPACE_NAME
        default: default
        expression: '{{opik.workspace_name}}'
    parameters:
      type: object
      properties:
        api_base_url:
          type: string
        workspace_name:
          type: string

- name: osp_marketing_tools
  image: mcp/osp_marketing_tools
  run:
    workdir: /app

- name: oxylabs
  image: mcp/oxylabs
  run:
    workdir: /app
  config:
    description: Configure the connection to Oxylabs Scraper
    secrets:
      - id: oxylabs.password
        name: OXYLABS_PASSWORD
        value: YOUR_PASSWORD_HERE
    env:
      - name: OXYLABS_USERNAME
        default: YOUR_USERNAME_HERE
        expression: '{{oxylabs.username}}'
    parameters:
      type: object
      properties:
        username:
          type: string
      required:
        - username

- name: perplexity-ask
  image: mcp/perplexity-ask
  run:
    workdir: /app
  config:
    description: Configure the connection to Perplexity
    secrets:
      - id: perplexity-ask.api_key
        name: PERPLEXITY_API_KEY
        value: YOUR_PERPLEXITY_API_KEY

- name: playwright
  image: mcp/playwright
  run:
    workdir: /app

- name: postgres
  image: mcp/postgres
  run:
    workdir: /app
    command:
      - $POSTGRES_URL
  config:
    secrets:
      - id: postgres.url
        name: POSTGRES_URL
        value: postgresql://host.docker.internal:5432/mydb

- name: pulumi
  image: mcp/pulumi
  run:
    workdir: /app

- name: puppeteer
  image: mcp/puppeteer
  run:
    workdir: /project
  config:
    description: The MCP server is allowed to access these paths
    env:
      - name: DOCKER_CONTAINER
        default: "true"
        expression: "true"

- name: razorpay
  image: mcp/razorpay
  run:
    workdir: /app
  config:
    description: Configure the connection to Razorpay
    secrets:
      - id: razorpay.key_secret
        name: RAZORPAY_KEY_SECRET
        value: your_razorpay_key_secret
    env:
      - name: RAZORPAY_KEY_ID
        default: your_razorpay_key_id
        expression: '{{razorpay.key_id}}'
    parameters:
      type: object
      properties:
        key_id:
          type: string
      required:
        - key_id

- name: redis
  image: mcp/redis
  run:
    workdir: /app
  config:
    description: Configure the connection to Redis
    secrets:
      - id: redis.password
        name: REDIS_PWD
        value: ""
    env:
      - name: REDIS_HOST
        default: 127.0.0.1
        expression: '{{redis.host}}'
      - name: REDIS_PORT
        default: "6379"
        expression: '{{redis.port}}'
      - name: REDIS_USERNAME
        default: default
        expression: '{{redis.username}}'
      - name: REDIS_SSL
        default: "False"
        expression: '{{redis.ssl}}'
      - name: REDIS_CA_PATH
        default: ""
        expression: '{{redis.ca_path}}'
      - name: REDIS_SSL_KEYFILE
        default: ""
        expression: '{{redis.ssl_keyfile}}'
      - name: REDIS_SSL_CERTFILE
        default: ""
        expression: '{{redis.ssl_certfile}}'
      - name: REDIS_CERT_REQS
        default: required
        expression: '{{redis.cert_reqs}}'
      - name: REDIS_CA_CERTS
        default: ""
        expression: '{{redis.ca_certs}}'
      - name: REDIS_CLUSTER_MODE
        default: "False"
        expression: '{{redis.cluster_mode}}'
    parameters:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        username:
          type: string
        ssl:
          type: boolean
        ca_path:
          type: string
        ssl_keyfile:
          type: string
        ssl_certfile:
          type: string
        cert_reqs:
          type: string
        ca_certs:
          type: string
        cluster_mode:
          type: boolean

- name: redis-cloud
  image: mcp/redis-cloud
  run:
    workdir: /app
  config:
    description: Configure the connection to Redis Cloud
    secrets:
      - id: redis-cloud.secret_key
        name: SECRET_KEY
        value: <redis_cloud_api_secret_key>
    env:
      - name: API_KEY
        default: <redis_cloud_api_key>
        expression: '{{redis-cloud.api_key}}'
    parameters:
      type: object
      properties:
        api_key:
          type: string
      required:
        - api_key

- name: resend
  image: mcp/resend
  run:
    workdir: /app
  config:
    description: Configure sender and reply email addresses
    secrets:
      - id: resend.api_key
        name: RESEND_API_KEY
        value: YOUR_RESEND_API_KEY
    env:
      - name: REPLY_TO_EMAIL_ADDRESSES
        default: YOUR_REPLY_TO_EMAIL_ADDRESSES
        expression: '{{resend.reply_to}}'
      - name: SENDER_EMAIL_ADDRESS
        default: YOUR_SENDER_EMAIL_ADDRESS
        expression: '{{resend.sender}}'
    parameters:
      type: object
      properties:
        reply_to:
          type: string
          description: comma separated list of reply to email addresses
        sender:
          type: string
          description: sender email address
      required:
        - reply_to
        - sender

- name: risken
  image: mcp/risken
  run:
    command:
      - stdio
  config:
    description: Configure the connection to Risken
    secrets:
      - id: risken.access_key
        name: RISKEN_ACCESS_TOKEN
        value: your_access_token
    env:
      - name: RISKEN_URL
        default: http://localhost:8000
        expression: '{{risken.url|safe}}'
    parameters:
      type: object
      properties:
        url:
          type: string

- name: scrapegraph
  image: mcp/scrapegraph
  run:
    workdir: /app
  config:
    secrets:
      - id: scrapegraph.api_key
        name: SGAI_API_KEY
        value: YOUR_SGAI_API_KEY

- name: scrapezy
  image: mcp/scrapezy
  run:
    workdir: /app
  config:
    secrets:
      - id: scrapezy.auth_token
        name: SCRAPEZY_API_KEY
        value: your_api_key

- name: sentry
  image: mcp/sentry
  run:
    workdir: /app
    command:
      - --auth-token
      - $SENTRY_AUTH_TOKEN
  config:
    secrets:
      - id: sentry.auth_token
        name: SENTRY_AUTH_TOKEN
        value: YOUR_SENTRY_TOKEN

- name: shopify
  image: mcp/shopify
  run:
    workdir: /app

- name: slack
  image: mcp/slack
  run:
    workdir: /app
  config:
    description: Configure the connection to Slack
    secrets:
      - id: slack.bot_token
        name: SLACK_BOT_TOKEN
        value: xoxb-your-bot-token
    env:
      - name: SLACK_TEAM_ID
        default: T01234567
        expression: '{{slack.team_id}}'
      - name: SLACK_CHANNEL_IDS
        default: C01234567, C76543210
        expression: '{{slack.channel_ids}}'
    parameters:
      type: object
      properties:
        team_id:
          type: string
        channel_ids:
          type: string
      required:
        - team_id

- name: smithery-cli
  image: mcp/smithery-cli
  run:
    workdir: /app
  config:
    secrets:
      - id: smithery-cli.api_key
        name: SMITHERY_API_KEY
        value: your_api_key_here

- name: stripe
  image: mcp/stripe
  run:
    workdir: /app
    command:
      - --tools=all
  config:
    secrets:
      - id: stripe.secret_key
        name: STRIPE_SECRET_KEY
        value: sk_STRIPE_SECRET_KEY

- name: tavily
  image: mcp/tavily
  run:
    workdir: /app
  config:
    secrets:
      - id: tavily.api_token
        name: TAVILY_API_KEY
        value: your-tavily-apikey-here

- name: tembo
  image: mcp/tembo
  run:
    workdir: /app
  config:
    secrets:
      - id: tembo.api_token
        name: TEMBO_API_KEY
        value: your-tembo-apikey-here

- name: time
  image: mcp/time
  run:
    workdir: /app

- name: triplewhale
  image: mcp/triplewhale
  run:
    workdir: /app
  config:
    secrets:
      - id: triplewhale.api_key
        name: TRIPLEWHALE_API_KEY
        value: your-triplewhale-api-key-here

- name: tweetbinder
  image: mcp/tweetbinder
  run:
    workdir: /app
  config:
    secrets:
      - id: tweetbinder.api_token
        name: TWEETBINDER_API_TOKEN
        value: your-bearer-token-here

- name: veyrax
  image: mcp/veyrax
  run:
    workdir: /app
  config:
    secrets:
      - id: veyrax.api_key
        name: VEYRAX_API_KEY
        value: your-veyrax-api-key-here

- name: webflow
  image: mcp/webflow
  run:
    workdir: /app
  config:
    secrets:
      - id: webflow.token
        name: WEBFLOW_TOKEN
        value: your_api_token

- name: wikipedia-mcp
  image: mcp/wikipedia-mcp

- name: wolfram-alpha
  image: mcp/wolfram-alpha
  config:
    secrets:
      - id: wolfram-alpha.api_key
        name: WOLFRAM_API_KEY
        value: your-app-id

- name: youtube_transcript
  image: mcp/youtube-transcript
  run:
    workdir: /app
